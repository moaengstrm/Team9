/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testprojekt;

import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import oru.inf.InfDB;

/**
 *
 * @author fkoer
 */
public class NewCommentWindow extends javax.swing.JFrame {

    InfDB idb;
    String userID;
    String postID;
    /**
     * Creates new form CommentTemplate
     */
    public NewCommentWindow(String userID, String postID) {
        initComponents();
        idb = TestProjekt.getDB();
        this.userID = userID;
        this.postID = postID;
        
               txtComment.getDocument().addDocumentListener(new DocumentListener() {
            
            @Override
            public void removeUpdate(DocumentEvent remove) {
                updateLetterCount();
            }

            @Override
            public void insertUpdate(DocumentEvent insert) {
                updateLetterCount();
            }

            @Override
            public void changedUpdate(DocumentEvent changed) {
                updateLetterCount();
            }
        });
    }
    
    
    
   
    private int countLetters(String text) {
        text = text.replaceAll(" ", "");
        return text.length();
    }
    
    private void updateLetterCount() {
        String text = txtComment.getText();
        int count = countLetters(text);
        String LetterCount = Integer.toString(count);
        lblLetterCount.setText(LetterCount);
        if(count <= 200) {
            updateLetterCountColor(false);
        } else {
            updateLetterCountColor(true);
        }
    }
    
    private void updateLetterCountColor (boolean tooManyLetters) {
        if(tooManyLetters) {
            lblMaxLetters.setForeground(Color.red);
            lblLetterCount.setForeground(Color.red);
        } else {
            lblMaxLetters.setForeground(Color.black);
            lblLetterCount.setForeground(Color.black);
        }
        updatePostButton(tooManyLetters);
    }
    
        private void updatePostButton(boolean tooManyLetters) {
        if(tooManyLetters) {
            btnComment.setEnabled(false);
        } else {
            btnComment.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtComment = new javax.swing.JTextArea();
        btnComment = new javax.swing.JButton();
        lblLetterCount = new javax.swing.JLabel();
        lblMaxLetters = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtComment.setColumns(20);
        txtComment.setLineWrap(true);
        txtComment.setRows(5);
        txtComment.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtCommentPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(txtComment);

        btnComment.setText("Kommentera");
        btnComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommentActionPerformed(evt);
            }
        });

        lblLetterCount.setText("0");
        lblLetterCount.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblMaxLetters.setText("/200");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblLetterCount, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(lblMaxLetters, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                        .addComponent(btnComment))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnComment)
                    .addComponent(lblLetterCount)
                    .addComponent(lblMaxLetters))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCommentPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtCommentPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommentPropertyChange

    private void btnCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommentActionPerformed
               String newComment = txtComment.getText();
        
        

        try {
            
          //if (idb.fetchSingle("SELECT COUNT (*) FROM KOMMENTAR where namn = '" +newCategory +"';").equals("1")){
               //JOptionPane.showMessageDialog(null, "Kategorin finns redan tillagd!");
          //}
          
          
         
             
            int kid = 0;  
            if (idb.fetchSingle("SELECT count (*) FROM KOMMENTAR").equals("0")) {
            kid = 1;
            }
          
            else {
            String maxKid = idb.fetchSingle("SELECT max (kid) FROM KOMMENTAR");
            System.out.println(maxKid);
            

            int maxKidInt = Integer.parseInt(maxKid);
            kid = maxKidInt + 1; 

            System.out.println(kid);
            
            
            }
            String query = "insert into Kommentar values ('" + newComment + "', " + kid + ", " + postID + ", " + userID + ")";

            idb.insert(query);

            
            
            this.dispose();
          }
    

         catch (Exception e) {
            System.out.println(e.getMessage());
        }
      
    }//GEN-LAST:event_btnCommentActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLetterCount;
    private javax.swing.JLabel lblMaxLetters;
    private javax.swing.JTextArea txtComment;
    // End of variables declaration//GEN-END:variables
}
